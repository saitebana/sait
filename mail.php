<?php
// –í–∫–ª—é—á–∞–µ–º —Å—Ç—Ä–æ–≥–∏–π —Ä–µ–∂–∏–º –æ—à–∏–±–æ–∫
declare(strict_types=1);

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
header('Content-Type: application/json; charset=utf-8');
header('X-Content-Type-Options: nosniff');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
set_time_limit(10);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è (–≤—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ)
define('TELEGRAM_TOKEN', '7052457745:AAHhW7BpeA6dQPiA4CsN5yRWpWwV3h0qHG0');
define('TELEGRAM_CHAT_ID', '-1002031108194');
define('ADMIN_EMAIL', 'orders@prazdniksytkami.ru');
define('MAIL_FROM', 'noreply@prazdniksytkami.ru');
define('LOG_FILE', __DIR__.'/mail_errors.log');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–æ–≤
ini_set('display_errors', '0');
ini_set('log_errors', '1');
ini_set('error_log', LOG_FILE);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
function logError(string $message): void {
    file_put_contents(LOG_FILE, date('[Y-m-d H:i:s]').' '.$message.PHP_EOL, FILE_APPEND);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è JSON –æ—Ç–≤–µ—Ç–∞
function sendJsonResponse(bool $success, string $message = '', array $data = [], int $httpCode = 200): void {
    http_response_code($httpCode);
    
    $response = [
        'success' => $success,
        'message' => $message,
        'data' => $data,
        'timestamp' => date('c')
    ];
    
    // –û—á–∏—Å—Ç–∫–∞ –±—É—Ñ–µ—Ä–∞ –≤—ã–≤–æ–¥–∞
    while (ob_get_level() > 0) ob_end_clean();
    
    echo json_encode($response, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT);
    exit;
}

// –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Ç–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
    if ($_SERVER['REQUEST_METHOD'] !== 'POST') {
        sendJsonResponse(false, '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω', [], 405);
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ Content-Type (–¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    $contentType = $_SERVER['CONTENT_TYPE'] ?? '';
    $isJsonContent = str_starts_with($contentType, 'application/json') 
                   || str_starts_with($contentType, 'text/json');
    
    if (!$isJsonContent) {
        // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ form-data –µ—Å–ª–∏ JSON –Ω–µ –ø—Ä–∏—à–µ–ª
        $formData = $_POST;
        if (!empty($formData)) {
            $data = $formData;
        } else {
            sendJsonResponse(false, '–ù–µ–≤–µ—Ä–Ω—ã–π Content-Type. –û—Ç–ø—Ä–∞–≤—å—Ç–µ JSON –∏–ª–∏ form-data', [], 415);
        }
    } else {
        // –ü–æ–ª—É—á–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º JSON
        $jsonInput = file_get_contents('php://input');
        if ($jsonInput === false || $jsonInput === '') {
            sendJsonResponse(false, '–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞', [], 400);
        }
        
        $data = json_decode($jsonInput, true);
        if (json_last_error() !== JSON_ERROR_NONE) {
            logError('JSON decode error: '.json_last_error_msg().' Input: '.substr($jsonInput, 0, 500));
            sendJsonResponse(false, '–ù–µ–≤–µ—Ä–Ω—ã–π JSON —Ñ–æ—Ä–º–∞—Ç', [], 400);
        }
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    $requiredFields = [
        'name' => '–ò–º—è',
        'phone' => '–¢–µ–ª–µ—Ñ–æ–Ω', 
        'event' => '–¢–∏–ø –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è'
    ];
    
    $errors = [];
    foreach ($requiredFields as $field => $name) {
        if (empty($data[$field])) {
            $errors[] = "–ü–æ–ª–µ '$name' –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è";
        }
    }
    
    if (!empty($errors)) {
        sendJsonResponse(false, implode("\n", $errors), ['fields' => array_keys($requiredFields)], 422);
    }

    // –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    $cleanData = [
        'name' => mb_substr(trim(preg_replace('/[^\p{L}\s\-]/u', '', $data['name'] ?? '')), 0, 100),
        'phone' => preg_replace('/[^0-9+]/', '', $data['phone'] ?? ''),
        'event' => mb_substr(trim(strip_tags($data['event'] ?? '')), 0, 50),
        'date' => !empty($data['date']) ? date('Y-m-d', strtotime($data['date'])) : null,
        'guests' => isset($data['guests']) ? (int)$data['guests'] : null,
        'message' => !empty($data['message']) ? mb_substr(trim(strip_tags($data['message'])), 0, 1000) : null
    ];

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    $messageText = "üéâ –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n"
        . "üë§ –ò–º—è: {$cleanData['name']}\n"
        . "üìû –¢–µ–ª–µ—Ñ–æ–Ω: {$cleanData['phone']}\n"
        . "üéÇ –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: {$cleanData['event']}\n";
    
    if ($cleanData['date']) $messageText .= "üìÖ –î–∞—Ç–∞: {$cleanData['date']}\n";
    if ($cleanData['guests']) $messageText .= "üë• –ì–æ—Å—Ç–µ–π: {$cleanData['guests']}\n";
    if ($cleanData['message']) $messageText .= "‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ: {$cleanData['message']}\n";

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Telegram
    $telegramSent = false;
    try {
        $url = "https://api.telegram.org/bot".TELEGRAM_TOKEN."/sendMessage";
        $params = [
            'chat_id' => TELEGRAM_CHAT_ID,
            'text' => $messageText,
            'parse_mode' => 'HTML'
        ];
        
        $ch = curl_init();
        curl_setopt_array($ch, [
            CURLOPT_URL => $url,
            CURLOPT_POST => true,
            CURLOPT_POSTFIELDS => $params,
            CURLOPT_RETURNTRANSFER => true,
            CURLOPT_TIMEOUT => 5,
            CURLOPT_SSL_VERIFYPEER => true
        ]);
        
        $response = curl_exec($ch);
        $httpCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
        
        if ($httpCode === 200) {
            $respData = json_decode($response, true);
            $telegramSent = $respData['ok'] ?? false;
        }
        
        if (!$telegramSent) {
            logError("Telegram send failed. Code: $httpCode, Response: ".substr($response, 0, 500));
        }
        
        curl_close($ch);
    } catch (Throwable $e) {
        logError("Telegram error: ".$e->getMessage());
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ email
    $emailSent = false;
    try {
        $subject = "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞: {$cleanData['event']}";
        $headers = [
            'From' => MAIL_FROM,
            'Content-Type' => 'text/plain; charset=UTF-8',
            'X-Mailer' => 'PHP/' . phpversion()
        ];
        
        $headersStr = '';
        foreach ($headers as $key => $value) {
            $headersStr .= "$key: $value\r\n";
        }
        
        $emailSent = mail(
            ADMIN_EMAIL,
            '=?UTF-8?B?'.base64_encode($subject).'?=',
            $messageText,
            $headersStr
        );
        
        if (!$emailSent) {
            logError("Email sending failed");
        }
    } catch (Throwable $e) {
        logError("Email error: ".$e->getMessage());
    }

    // –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    if ($telegramSent || $emailSent) {
        sendJsonResponse(true, '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞', [
            'channels' => [
                'telegram' => $telegramSent,
                'email' => $emailSent
            ],
            'order_id' => 'ORD-'.date('Ymd-His').'-'.bin2hex(random_bytes(3))
        ]);
    } else {
        sendJsonResponse(false, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', [], 500);
    }

} catch (Throwable $e) {
    logError("System error: ".$e->getMessage()."\n".$e->getTraceAsString());
    sendJsonResponse(false, '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞', [], 500);
}